package main

import (
	"fmt"
	"os"
	"strconv"
	"time"

	"github.com/christheoreo/advent-of-code-2022/internal/timetrack"
	"github.com/christheoreo/advent-of-code-2022/pkg/problems"
)

var keys []string = []string{"-prob", "-part"}
var problemsMap map[int]problems.Problem = map[int]problems.Problem{
	1: problems.ProblemOne{},
}

var problem problems.Problem

var parts string = "all"

func main() {
	argLength := len(os.Args[1:])
	if argLength != 4 {
		help()
		return
	}

	for i, a := range os.Args[1:] {
		if i%2 == 0 {

			// expect a key
		}
		fmt.Printf("Arg %d is %s\n", i+1, a)
	}

	key := os.Args[1]

	if key != "-p" {
		help()
		return
	}

	problemNumber, err := strconv.Atoi(os.Args[2])

	if err != nil {
		fmt.Printf("Error - Could not convet %s to a number\n", os.Args[2])
		return
	}

	problem, ok := problemsMap[problemNumber]

	if !ok {
		fmt.Println("Error could not find problem to solve")
		return
	}

	firstTime := time.Now()

	err = problem.SolveFirst()

	timetrack.TimeTrack(firstTime, fmt.Sprintf("%d - part 1", problemNumber))
	if err != nil {
		panic(err)
	}

	secondTime := time.Now()
	err = problem.SolveFirst()
	timetrack.TimeTrack(secondTime, fmt.Sprintf("%d - part 2", problemNumber))
	if err != nil {
		panic(err)
	}
}

func help() {
	fmt.Println("example usage 'go run cmd/cli/cli.go -p 1' this runs problem one")
}
